#!/usr/bin/env node

/**
 * Script de v√©rification de pr√©paration au d√©ploiement Vercel
 * V√©rifie que tous les composants n√©cessaires sont en place
 */

import { existsSync, statSync } from 'fs';
import { execSync } from 'child_process';

const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkFile(path, description) {
  if (existsSync(path)) {
    log(`‚úÖ ${description}`, 'green');
    return true;
  } else {
    log(`‚ùå ${description} (manquant: ${path})`, 'red');
    return false;
  }
}

function checkDirectory(path, description) {
  if (existsSync(path) && statSync(path).isDirectory()) {
    log(`‚úÖ ${description}`, 'green');
    return true;
  } else {
    log(`‚ùå ${description} (manquant: ${path})`, 'red');
    return false;
  }
}

function checkBuild() {
  try {
    log('üèóÔ∏è Test du build...', 'blue');
    execSync('npm run vercel-build', { stdio: 'pipe' });
    log('‚úÖ Build r√©ussi', 'green');
    return true;
  } catch (error) {
    log('‚ùå √âchec du build', 'red');
    console.error(error.message);
    return false;
  }
}

async function main() {
  log('üîç V√©rification de la pr√©paration au d√©ploiement Vercel', 'blue');
  log('=' .repeat(60), 'blue');

  let allChecks = true;

  // V√©rifications des fichiers essentiels
  allChecks &= checkFile('package.json', 'package.json pr√©sent');
  allChecks &= checkFile('vercel.json', 'Configuration Vercel');
  allChecks &= checkFile('tsconfig.json', 'Configuration TypeScript');
  allChecks &= checkFile('.env.production', 'Variables d\'environnement production');

  // V√©rifications des dossiers
  allChecks &= checkDirectory('client', 'Dossier client (frontend)');
  allChecks &= checkDirectory('server', 'Dossier server (backend)');
  allChecks &= checkDirectory('api', 'Dossier API Vercel');

  // V√©rifications des scripts
  allChecks &= checkFile('scripts/vercel-deploy.sh', 'Script de d√©ploiement');
  allChecks &= checkFile('test-production-deployment.js', 'Script de test de production');

  // Test du build
  allChecks &= checkBuild();

  // V√©rification des sorties de build
  allChecks &= checkDirectory('dist', 'Build frontend (dist)');
  allChecks &= checkDirectory('server-dist', 'Build backend (server-dist)');
  allChecks &= checkFile('dist/index.html', 'Page d\'accueil build√©e');

  log('', 'reset');
  if (allChecks) {
    log('üéâ PR√äT POUR LE D√âPLOIEMENT VERCEL!', 'green');
    log('', 'reset');
    log('üìã √âtapes suivantes:', 'blue');
    log('1. Allez sur vercel.com', 'yellow');
    log('2. Importez ce repository GitHub', 'yellow');
    log('3. Configurez les variables d\'environnement', 'yellow');
    log('4. D√©ployez!', 'yellow');
    log('', 'reset');
    log('üìñ Consultez DEPLOYMENT_READY.md pour les d√©tails', 'blue');
  } else {
    log('‚ö†Ô∏è  Certaines v√©rifications ont √©chou√©', 'red');
    log('Consultez les erreurs ci-dessus avant de d√©ployer', 'yellow');
  }
}

main().catch(console.error);