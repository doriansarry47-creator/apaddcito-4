#!/usr/bin/env node

// Test sp√©cifique pour v√©rifier que le probl√®me de page blanche est r√©solu
const path = require('path');
const fs = require('fs');

console.log('üß™ Test Sp√©cifique - R√©solution Page Blanche Vercel\n');

console.log('1Ô∏è‚É£ V√©rification de la configuration Vercel corrig√©e...');

try {
  const vercelConfigPath = path.join(__dirname, 'vercel.json');
  const vercelConfig = JSON.parse(fs.readFileSync(vercelConfigPath, 'utf8'));
  
  // V√©rifier que la route de fallback est correctement configur√©e
  const fallbackRoute = vercelConfig.routes?.find(route => route.src === '/(.*)')?.dest;
  const isCorrectFallback = fallbackRoute === '/index.html';
  
  console.log(`   ‚úÖ Route de fallback: ${fallbackRoute}`);
  console.log(`   ${isCorrectFallback ? '‚úÖ' : '‚ùå'} Fallback correct: ${isCorrectFallback ? 'Oui' : 'Non'}`);
  
  if (!isCorrectFallback) {
    console.log('   ‚ùå ERREUR: La route de fallback devrait √™tre "/index.html" et non "/dist/index.html"');
    process.exit(1);
  }
  
} catch (error) {
  console.log(`   ‚ùå Erreur lors de la lecture de vercel.json: ${error.message}`);
  process.exit(1);
}

console.log('\n2Ô∏è‚É£ V√©rification des am√©liorations de gestion d\'erreurs...');

try {
  // V√©rifier que les composants de gestion d'erreur existent
  const errorBoundaryPath = path.join(__dirname, 'client/src/components/error-boundary.tsx');
  const errorBoundaryExists = fs.existsSync(errorBoundaryPath);
  console.log(`   ‚úÖ ErrorBoundary: ${errorBoundaryExists ? 'Pr√©sent' : '‚ùå Manquant'}`);
  
  // V√©rifier App.tsx utilise ErrorBoundary
  const appPath = path.join(__dirname, 'client/src/App.tsx');
  const appContent = fs.readFileSync(appPath, 'utf8');
  const usesErrorBoundary = appContent.includes('ErrorBoundary') && appContent.includes('import { ErrorBoundary }');
  console.log(`   ‚úÖ App utilise ErrorBoundary: ${usesErrorBoundary ? 'Oui' : '‚ùå Non'}`);
  
  // V√©rifier useAuthQuery robuste
  const useAuthPath = path.join(__dirname, 'client/src/hooks/use-auth.ts');
  const useAuthContent = fs.readFileSync(useAuthPath, 'utf8');
  const hasImprovedErrorHandling = useAuthContent.includes('try {') && useAuthContent.includes('catch (error)');
  console.log(`   ‚úÖ useAuthQuery avec gestion d'erreurs: ${hasImprovedErrorHandling ? 'Oui' : '‚ùå Non'}`);
  
  if (!errorBoundaryExists || !usesErrorBoundary || !hasImprovedErrorHandling) {
    console.log('   ‚ùå ERREUR: Certaines am√©liorations de gestion d\'erreurs sont manquantes');
    process.exit(1);
  }
  
} catch (error) {
  console.log(`   ‚ùå Erreur lors de la v√©rification des composants: ${error.message}`);
  process.exit(1);
}

console.log('\n3Ô∏è‚É£ Test du build Vercel...');

const { execSync } = require('child_process');

try {
  execSync('npm run vercel-build', { stdio: 'pipe' });
  console.log('   ‚úÖ Build Vercel: R√©ussi');
} catch (error) {
  console.log('   ‚ùå Build Vercel: √âchou√©');
  console.log(`   Erreur: ${error.message}`);
  process.exit(1);
}

console.log('\n‚úÖ SUCC√àS: Toutes les corrections pour r√©soudre la page blanche sont en place!');
console.log('\nüìã R√©sum√© des corrections appliqu√©es:');
console.log('   ‚úÖ Route de fallback Vercel corrig√©e (/index.html)');
console.log('   ‚úÖ ErrorBoundary ajout√© pour capturer les erreurs React');
console.log('   ‚úÖ useAuthQuery robuste contre les erreurs r√©seau');
console.log('   ‚úÖ ProtectedRoute g√®re les √©tats d\'erreur');
console.log('   ‚úÖ Build Vercel fonctionne correctement');

console.log('\nüöÄ L\'application devrait maintenant rediriger vers /login au lieu d\'afficher une page blanche!');
console.log('\nüìù Actions de suivi apr√®s d√©ploiement:');
console.log('   1. V√©rifier que https://votre-app.vercel.app/ redirige vers /login');
console.log('   2. Tester l\'inscription et la connexion');
console.log('   3. V√©rifier que les utilisateurs connect√©s acc√®dent au dashboard');
console.log('   4. S\'assurer qu\'aucune erreur JavaScript n\'appara√Æt dans la console');